pipeline {
    agent any
    parameters{
        booleanParam(name: 'destroyEnvironment', defaultValue: false, description: 'Destroy AWS environment when true')
    }

    stages {
        stage('Init') {
            when {
                expression {
                    params.destroyEnvironment == false
                }
            }
            steps {
                git url: 'git@github.com:mkutsybala/EPAM-Project-v3.git', branch: 'dev', credentialsId: 'Jenkins_KEY'
                sh "cp -r dev/* /home/ubuntu/EPAM/project_web_srv_docker/docker/source"
            }
        }
        stage('Build image') {
            when {
                expression {
                    params.destroyEnvironment == false
                }
            }
            steps {
                git url: 'git@github.com:mkutsybala/EPAM-Project-v3.git', branch: 'docker', credentialsId: 'Jenkins_KEY'
                sh "cp docker/Dockerfile /home/ubuntu/EPAM/project_web_srv_docker/docker/Dockerfile"
                sh "docker build -t mkutsybala/epam_project:latest /home/ubuntu/EPAM/project_web_srv_docker/docker"
                sh "docker push mkutsybala/epam_project:latest"
            }
        }
        stage('Build inftastructure') {
            when {
                expression {
                    params.destroyEnvironment == false
                }
            }
            steps {
                git url: 'git@github.com:mkutsybala/EPAM-Project-v3.git', branch: 'terraform', credentialsId: 'Jenkins_KEY'
                sh "cp terraform/* /home/ubuntu/EPAM/project_web_srv_docker/terraform"
                sh "cd /home/ubuntu/EPAM/project_web_srv_docker/terraform && terraform apply --auto-approve"
                sh "sleep 1m"
            }
        }
        stage('Deploy') {
            when {
                expression {
                    params.destroyEnvironment == false
                }
            }
            steps {
                git url: 'git@github.com:mkutsybala/EPAM-Project-v3.git', branch: 'ansible', credentialsId: 'Jenkins_KEY'
                sh "cp -r ansible/* /home/ubuntu/EPAM/project_web_srv_docker/ansible"
                ansiblePlaybook credentialsId: 'ssh_key_for_ansible', disableHostKeyChecking: true, installation: 'ansible', inventory: '/home/ubuntu/EPAM/project_web_srv_docker/ansible/web_srv_docker_aws_ec2.yml', playbook: '/home/ubuntu/EPAM/project_web_srv_docker/ansible/playbook_deploy_docker_to_web_srv.yml'
            }
        }
        stage('Destroy infrastructure') {
            when {
                expression {
                    params.destroyEnvironment == true
                }
            }
            steps {
                sh "cd /home/ubuntu/EPAM/project_web_srv_docker/terraform && terraform destroy --auto-approve"
            }
        }
    }
}